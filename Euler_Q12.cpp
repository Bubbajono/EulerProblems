#include "Euler_Q12.h"
#include "GeneralMethods.h"
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <limits>

using namespace std;

/*
Problem 12 - Highly divisible triangular number

The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

Euler_Q12::Euler_Q12(int target)
{
    cout<< "Euler Q12:" <<endl;

    std::vector<int> vec = GeneralMethods::GetTriangleNumbers(100000);
    long result = 0;
    long factorCount;
    for (int i = 0; i < vec.size(); i++)
    {
        factorCount = GeneralMethods::CountDivisors(vec[i]); //Add 2 for 1 and itself
        if (factorCount > target)
        {
            result = vec[i];
            break;
        }
    }

    std::cout<< "The value of the first triangle number to have over " + std::to_string(target) + " divisors is: " + std::to_string(result) <<std::endl<<std::endl;

}
